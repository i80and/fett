overview: |
  Fett offers a number of filters that will transform a single input variable.
tests:
  - name: Odd
    desc: True iff the value is an odd integer.
    data: { list: [1, 2, 3, 4, 5] }
    template: '{{for x in list}}{{if x odd}}{{x}}{{end}}{{end}}'
    expected: '135'

  - name: Even
    desc: True iff the value is an even integer.
    data: { list: [1, 2, 3, 4, 5] }
    template: '{{for x in list}}{{if x even}}{{x}}{{end}}{{end}}'
    expected: '24'

  - name: Car
    desc: Given a list, returns the first element.
    data: { list: [1, 2, 3, 4, 5] }
    template: '{{list car}}'
    expected: '1'

  - name: Cdr
    desc: Given a list, returns all but the first element.
    data: { list: [1, 2, 3, 4, 5] }
    template: '{{for x in list cdr cdr}}{{x}}{{end}}'
    expected: '345'

  - name: Len
    desc: Returns the length of a list, string, or object.
    data: { list: [1, 2, 3, 4, 5], str: "foo", obj: {"x": 1} }
    template: '{{list len}} {{str len}} {{obj len}}'
    expected: '5 3 1'

  - name: LenInteger
    desc: Len should return an error if given an integer.
    data: { x: 5 }
    template: '{{x len}}'
    error: true

  - name: Strip
    desc: Returns the input string with whitespace on each side removed.
    data: { value: "  Foo bar  " }
    template: '{{value strip}}'
    expected: 'Foo bar'

  - name: Inc
    desc: Increments an integer. Converts strings to an integer before incrementing.
    data: { val: 4 }
    template: '{{val inc inc}}'
    expected: '6'

  - name: Dec
    desc: Decrements an integer. Converts strings to an integer before incrementing.
    data: { val: 4 }
    template: '{{val dec dec}}'
    expected: '2'

  - name: Not
    desc: Inverts a boolean.
    data: { boolean: false }
    template: '{{if boolean not}}Rendered{{end}}'
    expected: 'Rendered'

  - name: PositiveTrue
    desc: Return true given a positive number.
    data: { x: 5 }
    template: '{{if x positive}}Rendered{{end}}'
    expected: 'Rendered'

  - name: PositiveZero
    desc: Return false given zero.
    data: { x: 0 }
    template: '{{if x positive}}Rendered{{end}}'
    expected: ''

  - name: PositiveFalse
    desc: Return false given a negative number.
    data: { x: -1 }
    template: '{{if x positive}}Rendered{{end}}'
    expected: ''

  - name: NegativeTrue
    desc: Return true given a negative number.
    data: { x: -5 }
    template: '{{if x negative}}Rendered{{end}}'
    expected: 'Rendered'

  - name: NegativeZero
    desc: Return false given zero.
    data: { x: 0 }
    template: '{{if x negative}}Rendered{{end}}'
    expected: ''

  - name: NegativeFalse
    desc: Return false given a positive number.
    data: { x: 1 }
    template: '{{if x negative}}Rendered{{end}}'
    expected: ''

  - name: Split
    desc: Splits a string by whitespace
    data: { values: '1 2 3' }
    template: '{{for x in values split}}{{x inc}}{{end}}'
    expected: '234'

  - name: Escape
    desc: Force escaping of HTML special characters
    data: { str: "&<>\"'" }
    template: '{{str escape}}'
    expected: '&amp;&lt;&gt;&quot;&#x27;'

  - name: StripTags
    desc: |
      Remove HTML tags. This should not handle nested tags intelligently
      without a major spec version bump.
    data: { str: "Foo <i>bar</i <nesting></nesting>><b>meh</b>" }
    template: '{{str striptags}}'
    expected: 'Foo bar>meh'

  - name: timesNegOnePositive
    desc: Multiply a positive value by -1.
    data: { x: 1 }
    template: '{{ x timesNegOne }}'
    expected: '-1'

  - name: timesNegOnePositiveString
    desc: Multiply a positive string value by -1.
    data: { x: '1' }
    template: '{{ x timesNegOne }}'
    expected: '-1'

  - name: timesNegOneNegative
    desc: Multiply a negative value by -1.
    data: { x: -1 }
    template: '{{ x timesNegOne }}'
    expected: '1'

  - name: timesNegOneNegativeString
    desc: Multiply a negative string value by -1.
    data: { x: '-1' }
    template: '{{ x timesNegOne }}'
    expected: '1'

  - name: ZeroTrue
    desc: Check if a value is zero.
    data: { x: 0 }
    template: '{{ if x zero }}Zero{{ end }}'
    expected: 'Zero'

  - name: ZeroFalse
    desc: Check if a nonzero value is zero.
    data: { x: 1 }
    template: '{{ if x zero }}Zero{{ end }}'
    expected: ''

  - name: UnknownFilter
    desc: Unknown filters should result in an error
    data: { x: 0 }
    template: '{{x foobarbaz}}'
    error: true

  - name: UnknownFormatFilter
    desc: Unknown format filters should result in an error
    data: { y: 1, x: '{{y foobarbaz}}' }
    template: '{{format x}}'
    error: true

  # Filters taking arguments

  - name: Add
    desc: Add
    data: { x: 5, y: "5" }
    template: '{{ x plus(4) }}{{ y plus(2) }}'
    expected: '97'

  - name: Minus
    desc: Minus
    data: { x: 5, y: "5" }
    template: '{{ x minus(4) }}{{ y minus(2) }}'
    expected: '13'

  # Combinations

  - name: IncCarCdrCdr
    desc: Increments the third element of a list.
    data: { list: [1, 2, 3, 4, 5] }
    template: '{{list inc car cdr cdr}}'
    expected: '4'

  - name: NotZero
    desc: Inverts the zero filter
    data: { x: 5 }
    template: '{{ if x zero not }}Zero{{ end }}'
    expected: 'Zero'

